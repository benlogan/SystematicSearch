@article{https://doi.org/10.1002/smr.1856,
author = {Lago, Patricia and Penzenstadler, Birgit},
title = {Editorial: Reality check for software engineering for sustainability—pragmatism required},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {2},
pages = {e1856},
keywords = {editorial, software engineering, sustainability},
doi = {https://doi.org/10.1002/smr.1856},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1856},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1856},
note = {e1856 smr.1856},
year = {2017}
}
@article{https://doi.org/10.1002/spe.3149,
author = {Zada, Islam and Shahzad, Sara and Ali, Shaukat and Mehmood, Raja Majid},
title = {OntoSuSD: Software engineering approaches integration ontology for sustainable software development},
journal = {Software: Practice and Experience},
volume = {53},
number = {2},
pages = {283-317},
keywords = {agile, green, lean, ontology, software development process model, sustainability},
doi = {https://doi.org/10.1002/spe.3149},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.3149},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.3149},
abstract = {Abstract Different software development approaches (SDAs) are developed with broad portfolios of development processes. Each of the approaches has certain exclusive principles, practices, thinking, and values, which are informally represented, implemented, and improperly institutionalized. Ontologies are developed for the representation, assessment, and adaptation of SDAs separately without having a shared terminology which may lead to terminological conflict and confusion affecting the simultaneous representation and implementation in software development industry and academia. The software engineering approaches does not consider and support sustainability as priority concern. However, the approaches have capabilities of supporting sustainable software development in different sustainability aspects. This research article aims for the designing and development of an integrated ontology of software engineering approaches (i.e., agile, lean, and green) named OntoSuSD (ontology for sustainable software development) to support sustainable software development knowledge, awareness, and implementation. The goal of OntoSuSD is to propose, design and develop a formal, generic, consistent, and shared knowledge base containing semantic terminology and description of concepts and relationships generated around the representation and implementation of lean, agile, and green approaches in software development processes, which will facilitate their simultaneous implementation and assessment for sustainable software development. The OntoSuSD is developed using practical ontology engineering methodology by reusing relevant ontologies and explicit concepts and properties are defined to fulfill knowledge requirements and representations of the domain. The OntoSuSD is evaluated, and results infer OntoSuSD has high ontological design, good domain coverage, potential applications and achieves purpose of the ontology development.},
year = {2023}
}
@article{https://doi.org/10.1002/smr.1853,
author = {Chitchyan, Ruzanna and Groher, Iris and Noppen, Joost},
title = {Uncovering sustainability concerns in software product lines},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {2},
pages = {e1853},
keywords = {case study analysis, software product line engineering, sustainability, qualitative text analysis},
doi = {https://doi.org/10.1002/smr.1853},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1853},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1853},
note = {e1853 smr.1853},
abstract = {Abstract Sustainable living, ie, living within the bounds of the available environmental, social, and economic resources, is the focus of many present-day social and scientific discussions. But what does sustainability mean within the context of software engineering? In this paper, we undertake a comprehensive analysis of 8 case studies to address this question within the context of a specific software engineering approach, software product line engineering (SPLE). We identify the sustainability-related characteristics that arise in present-day studies that apply SPLE. We conclude that technical and economic sustainability are in prime focus on the present SPLE practice, with social sustainability issues, where they relate to organisations, also addressed to a good degree. On the other hand, the issues related to the personal sustainability are less prominent, and environmental considerations are nearly completely amiss. We present feature models and cross-relations that result from our analysis as a starting point for sustainability engineering through SPLE, suggesting that any new development should consider how these models would be instantiated and expanded for the intended sociotechnical system. The good representation of sustainability features in these models is also validated with 2 additional case studies.},
year = {2017}
}
@article{https://doi.org/10.1002/smr.1849,
author = {Pahl, Claus and Jamshidi, Pooyan and Weyns, Danny},
title = {Cloud architecture continuity: Change models and change rules for sustainable cloud software architectures},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {2},
pages = {e1849},
keywords = {adaptation, change, change models, cloud systems, evolution, software architecture},
doi = {https://doi.org/10.1002/smr.1849},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1849},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1849},
note = {e1849 smr.1849},
abstract = {Abstract Cloud systems provide elastic execution environments of resources that link application and infrastructure/platform components, which are both exposed to uncertainties and change. Change appears in 2 forms: the evolution of architectural components under changing requirements and the adaptation of the infrastructure running applications. Cloud architecture continuity refers to the ability of a cloud system to change its architecture and maintain the validity of the goals that determine the architecture. Goal validity implies the satisfaction of goals in adapting or evolving systems. Architecture continuity aids technical sustainability, that is, the longevity of information, systems, and infrastructure and their adequate evolution with changing conditions. In a cloud setting that requires both steady alignment with technological evolution and availability, architecture continuity directly impacts economic sustainability. We investigate change models and change rules for managing change to support cloud architecture continuity. These models and rules define transformations of architectures to maintain system goals: Evolution is about unanticipated change of structural aspects of architectures, and adaptation is about anticipated change of architecture configurations. Both are driven by quality and cost, and both represent multidimensional decision problems under uncertainty. We have applied the models and rules for adaptation and evolution in research and industry consultancy projects.},
year = {2017}
}
@article{https://doi.org/10.1002/smr.1852,
author = {Jagroep, Erik and Procaccianti, Giuseppe and van der Werf, Jan Martijn and Brinkkemper, Sjaak and Blom, Leen and van Vliet, Rob},
title = {Energy efficiency on the product roadmap: An empirical study across releases of a software product},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {2},
pages = {e1852},
keywords = {energy efficiency, profiling, product roadmap, software product},
doi = {https://doi.org/10.1002/smr.1852},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1852},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1852},
note = {e1852 smr.1852},
abstract = {Abstract In the quest for energy efficient Information and Communication Technology, research has mostly focused on the role of hardware. However, the impact of software on energy consumption has been acknowledged as significant by researchers in software engineering. In spite of that, due to cost and time constraints, many software producing organizations are unable to effectively measure software energy consumption preventing them to include energy efficiency in the product roadmap. In this paper, we apply a software energy profiling method to reliably compare the energy consumed by a commercial software product across 2 consecutive releases. We demonstrate how the method can be applied and provide an in-depth analysis of energy consumption of software components. Additionally, we investigate the added value of these measurement for multiple stakeholders in a software producing organization, by means of semistructured interviews. Our results show how the introduction of an encryption module caused a noticeable increase in the energy consumption of the product. Such results were deemed valuable by the stakeholders and provided insights on how specific software changes might affect energy consumption. In addition, our interviews show that such a quantification of software energy consumption helps to create awareness and eventually consider energy efficiency aspects when planning software releases.},
year = {2017}
}
@article{https://doi.org/10.1002/smr.1808,

title = {Issue Information},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {2},
pages = {e1808},
doi = {https://doi.org/10.1002/smr.1808},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1808},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1808},
abstract = {No abstract is available for this article.},
year = {2017}
}
@article{https://doi.org/10.1002/smr.1851,
author = {Feitosa, Daniel and Alders, Rutger and Ampatzoglou, Apostolos and Avgeriou, Paris and Nakagawa, Elisa Yumi},
title = {Investigating the effect of design patterns on energy consumption},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {2},
pages = {e1851},
keywords = {design patterns, energy efficiency, GoF patterns, state pattern, strategy pattern, template method pattern},
doi = {https://doi.org/10.1002/smr.1851},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1851},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1851},
note = {e1851 JSME-16-0030.R2},
abstract = {Abstract Gang of Four (GoF) patterns are well-known best practices for the design of object-oriented systems. In this paper, we aim at empirically assessing their relationship to energy consumption, ie, a performance indicator that has recently attracted the attention of both researchers and practitioners. To achieve this goal, we investigate pattern-participating methods (ie, those that play a role within the pattern) and compare their energy consumption to the consumption of functionally equivalent alternative (nonpattern) solutions. We obtained the alternative solution by refactoring the pattern instances using well-known transformations (eg, replace polymorphism with conditional statements). The comparison is performed on 169 methods of 2 GoF patterns (namely, State/Strategy and Template Method), retrieved from 2 well-known open source projects. The results suggest that for the majority of cases the alternative design excels in terms of energy consumption. However, in some cases (eg, when the method is large in size or invokes many methods) the pattern solution presents similar or lower energy consumption. The outcome of our study can be useful to both researchers and practitioners, because we: (1) provide evidence on a possible negative effect of GoF patterns, and (2) can provide guidance on which cases the use of the pattern is not hurting energy consumption.},
year = {2017}
}
@article{https://doi.org/10.1002/smr.1850,
author = {Moraga, Ma Ángeles and García-Rodríguez de Guzmán, Ignacio and Calero, Coral and Johann, Timo and Me, Gianantonio and Münzel, Harald and Kindelsberger, Julia},
title = {GreCo: Green code of ethics},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {2},
pages = {e1850},
keywords = {code of ethics, green software engineering, sustainability},
doi = {https://doi.org/10.1002/smr.1850},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1850},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1850},
note = {e1850 JSME-16-0047.R2},
abstract = {Abstract Background Codes of ethics (CoE) are widely adopted in several professional areas, including that of Software Engineering. However, contemporary CoE do not pay sufficient attention to one of the most important trends to have appeared in the last years environmental issues. Aim The aim of this study is to establish a Green CoE for software engineering and Professional Practices (GreCo). Our intention is to cover a wide range of aspects related to sustainability, such as economic, environmental, social, and technical features. We are additionally interested in encouraging software engineers to adopt these aspects. Methods The Green CoE presented is the result of the interaction of several experts in the area. A first version of GreCo, whose starting point was a discussion at the GInSEng workshop, was created by identifying key principles and adapting them to the Green area. Next, various important CoE were reviewed so as to gather the existing references to sustainability or to detect new ones. These elements would then possibly be incorporated into the new code or stimulate the creation of new sustainable principles. Results The final result is the GreCo code, which has been produced by modifying existing principles or by the introduction of new ones.},
year = {2017}
}
@article{https://doi.org/10.1002/smr.1848,
author = {Chinenyeze, Samuel J. and Liu, Xiaodong and Al-Dubai, Ahmed},
title = {BEFTIGRE: Behaviour-driven full-tier green evaluation of mobile cloud applications},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {2},
pages = {e1848},
keywords = {BDD for MCA, behaviour-driven evaluation, green metrics evaluation, green mobile cloud, mobile cloud evaluation, mobile offloading comparison},
doi = {https://doi.org/10.1002/smr.1848},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1848},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1848},
note = {e1848 JSME-16-0055.R2},
abstract = {Abstract With the resource-constrained nature of mobile devices and the resource-abundant offerings of the cloud, several promising optimisation techniques have been proposed by the green computing research community. Prominent techniques and unique methods have been developed to offload resource intensive tasks from mobile devices to the cloud. Although these schemes address similar questions within the same domain of mobile cloud application (MCA) optimisation, evaluation is tailored to the scheme and also solely mobile focused, thus making it difficult to clearly compare with other existing counterparts. In this work, we first analyse the existing/commonly adopted evaluation technique, then with the aim to fill the above gap, we propose the behaviour-driven full-tier green evaluation approach, which adopts the behaviour-driven concept for evaluating MCA performance and energy usage—ie, green metrics. To automate the evaluation process, we also present and evaluate the effectiveness of a resultant application program interface and tool driven by the behaviour-driven full-tier green evaluation approach. The application program interface is based on Android and has been validated with Elastic Compute Cloud instance. Experiments show that Beftigre is capable of providing a more distinctive, comparable, and reliable green test results for MCAs.},
year = {2017}
}
@article{https://doi.org/10.1002/smr.1922,
author = {Ouhbi, Sofia and Fernández-Alemán, José Luis and Toval, Ambrosio and Rivera Pozo, José and Idri, Ali},
title = {Sustainability requirements for connected health applications},
journal = {Journal of Software: Evolution and Process},
volume = {30},
number = {7},
pages = {e1922},
keywords = {apps, catalog, connected health, requirements, sustainability},
doi = {https://doi.org/10.1002/smr.1922},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1922},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1922},
note = {e1922 smr.1922},
abstract = {Abstract Connected health applications are efficient tools to improve health care services. The aim of this paper is to define a reusable requirements repository (catalog) for sustainable connected health applications based on the main related software engineering standards, e-health technology standards, and literature. The catalog contains requirements which cover the individual, social, environmental, and technical dimensions of sustainability. The requirements presented in this paper can be very useful to connected health application stakeholders and can be adapted to specific m-health applications. Moreover, the requirements catalog can be used to generate a checklist of requirements to evaluate and audit connected health applications. An application example is presented to show that the evaluation of connected health applications using the generated checklist is realistic.},
year = {2018}
}

