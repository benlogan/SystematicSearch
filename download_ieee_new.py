import requests

# can't get this to work! FIXME
# they have an API though, so I've just got an API key - try that next time...

# Define the URL for the XHR request
xhr_url = "https://ieeexplore.ieee.org/rest/search/citation/format?recordIds=9675938,8128977,8112107,6254546,8409215,8705852,6008495,9690260,9690205,7155006,9004283,6118899,6728926,7724226,8449825,6139638,6227030,7169671,8816873,9679832,9604527,8449016,9585139,8796529,8966710,6017871,8796633,5167271,6353405,5708281,5601682,5601679,6391808,6109215,5735595,5070049,8780408,6139095,4760631,5234398,5543346,5427382,6357172,6260858,5493359,6721885,7975693,7005931,7829853,9141166,4738046,8674050,6477253,6716716,4458787,6061300,8024729,7030217,5156744,5657681,7359627,9170668,6735048,5283542,8548095,6613456,7280132,7878441,6197783,6169664,6360438,5310123,7818722,6263127,8326827,6663313,6716161,5676331,8168446,6360539,9821719,9300767,9791830,6576756,4782221,5659717,5346051,6061328,1180358,5718554,6047009,9210362,9717357,10172842,7516827,5704342,6662597,5876124,8797634,6032566&download-format=download-bibtex&lite=true"

# Define the headers, payload (data), and other parameters as needed
headers = {
    "accept": "application/json, text/plain, */*",
    "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
    "cache-http-response": "false",
    "sec-ch-ua": "\"Chromium\";v=\"116\", \"Not)A;Brand\";v=\"24\", \"Google Chrome\";v=\"116\"",
    "cookie": "PF=BZGmovWVJldcNPCGQay9zrtsc5fxkUOPXWeHfngCLsUB; TS01f293bb=012f350623669835a64a6876d5ad5195e81ac96a05ac1041dc2ae7f0b3425f2f628eabb81b288c588bbe50692cd370f349259ea8ef28be1f6b4e6980e7cdbbfa44777f0c06; s_ecid=MCMID%7C63555498982347133370131496470056278115; AMCVS_8E929CC25A1FB2B30A495C97%40AdobeOrg=1; ipList=37.205.58.148,185.85.187.100; ipCheck=37.205.58.148; ieeeSSO=ZlEtommRo2J8R8kGRAtpMvrAP+29DAt03gyjVsiYUyanPAMEysNnwg==; opentoken=T1RLAQLhllzBnMY4ZmI_motdYMz2X4FS0hCx5lk59oMqpQ-SrEp5kW99AACQe7q_O0VhnC_9iy2UT9_KZTc9dkGPrY7A-gWY_HdT4Tj3KYRPrilR7FUVg2rOdzEVLRPa4s5B2gW3KS2xWqwFzfkw_TTzD4zFfZb0Gc1SNhw7ZVMcCK7YXMTg-LEUz77Mb5PNfNG091LfAGTQ5GQX1wsgD-ywhoa8JyLMjdMOT_PCS0WqxpnrK63AkfHcdbdW; TS013304a6=01c1c020dd9c0d3353512ba0b66274673e31000345b919425ceda02047af0d9b9141b8155a33ace1662596bf4df0e4074f79e82e01; ieeeUserInfoCookie=%7B%22userInfoId%22%3A%2299624278%22%2C%22cartItemQty%22%3A0%2C%22name%22%3A%22Ben%20Logan%22%2C%22lastUpdated%22%3A-1569497732669200540%2C%22env%22%3A%22pr%22%7D; PA.Global_Websession=eyJ6aXAiOiJERUYiLCJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiYTQiLCJwaS5zcmkiOiJiTW1ZOXFvb0JxTm1RT1pGQ05iN1dzVnY3R3MuVGtvIn0..BSTypBdZZ8zS8_0LXj5ZnQ.D-fPWjcH5TqGLr89PwXMgPOWg8LjTm1JptDVi_48fxRh2nBti2CepAQ-qn9kkDd7Qd8FHdwxJQPrirPPTKug5gVg-zPcYk6Gg-NNA9maoUcDIVAhzZEdpFuQKmN7Pdf2MMF156P8H7-6shTU22AnxN6acRhOYHE8hCH72u6-lKVJqJGS3Cfw2h3-XrDuKL92mLMzRikh5Vv7D5t8uJRWRRYS1pdLOrDSA1ol5DkrPGcwwORXbdZXCuzoXpsqavHL9_VHKpeicB_r9z2vvYMIS9EHjfrzIk6OI2o8afJDwqvI2fsYt44YOZEJtpa1xIsDRII--PLBWeIFzF7wDXgocB-g03L3kQvqwU7w_wQ9XdbecvAiTSsbhK3B1Kk-jXKjOkm9VpaTvWMySqK4ElwSgSq87l-ZlAkJqe7n5xSMW_El9dppdy2UwBNnYGviAGmrydF79sFg2nh1iwQjoNiJlQ.Or8FSWInV-PZ4ciAu5OCKw; TS01797c2d=012f3506231ccd58db46326b38dfdb4e5f8e655f57ed9f965eeb69f6ba11afb0f73aab6bc6b7c8daf3e482d386d1f6ba3745572774; TS011ecef4=01c1c020dd9c0d3353512ba0b66274673e31000345b919425ceda02047af0d9b9141b8155a33ace1662596bf4df0e4074f79e82e01; JSESSIONID=ZSrNF2G60MwzhH1h9mWjlOQugQwlFr7Sz-g8Bi1Zeb0PJKwc42bI!269317560; WLSESSION=237134476.20480.0000; _vid_t=NFds0LDrq1X8xUb/CI8+IALV4M25RbQydHGnwNolcJsqOOWS4OiYNdRNoIqUlZNf7T4Pw6pxf5W92A==; fp=b357eed057812b4fa7932876b65d70da; TS0154b67f=012f350623944ea1595d35126622172855d2c7ff157e721ee783988627032fea6aeb10fc57d9b5ae5461858e3c290c6705a72d5509; cookieconsent_status=dismiss; AMCV_8E929CC25A1FB2B30A495C97%40AdobeOrg=359503849%7CMCMID%7C63555498982347133370131496470056278115%7CMCIDTS%7C19626%7CMCAID%7CNONE%7CMCOPTOUT-1695665572s%7CNONE%7CvVersion%7C5.0.1; utag_main=v_id:018acd17646f000b0e41ef9f8d940507500c806d00b78; TS01b03060=012f3506234201b7fc58187f3e9dc1c2f49a498d1b99de33d5eff5749d751b8f80bc58bc02a045cd08cf2ec936da624eb063fee80f; TSaeeec342027=080f8ceb8aab200027aa300101f2e9915a9e61499e2c64b0483e6f0fea25210f0c6cbdb031e66751088de3b2c71130000c4d94b6184c76f3d46e2a9151631ff6b2407a9f8e2fa885a9308e2b69123a0f49f4177c8d8b62bf23d172f1f277c601",
}

# Make the XHR-like request
response = requests.get(xhr_url, headers=headers)

# Check the response
if response.status_code == 200:
    # Request was successful
    print("XHR-like request successful")
    print("Response content:", response.text)
else:
    print(f"XHR-like request failed with status code {response.status_code}")
    print("Response content:", response.text)
